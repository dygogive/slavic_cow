import requests
from flask import Flask, request
import schedule
import time
import datetime
from pytz import timezone
from bs4 import BeautifulSoup
import os

app = Flask(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7633507105:AAEqMB0ETZCK1VZ3ccgaj7yor4KUK88bZcY"
BASE_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è `chat_id`
CHAT_ID = None

# URL —Å–∞–π—Ç—É
URL = "https://www.dar.gov.ua/news"

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
KYIV_TZ = timezone("Europe/Kiev")


def send_telegram_message(chat_id, text):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API."""
    url = f"{BASE_URL}/sendMessage"
    params = {"chat_id": chat_id, "text": text}
    response = requests.get(url, params=params)
    print(f"Telegram API Response: {response.status_code} - {response.text}")


@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫—ñ–≤ Telegram."""
    global CHAT_ID

    update = request.get_json()
    if "message" in update:
        chat_id = update["message"]["chat"]["id"]
        text = update["message"].get("text", "")

        if text == "/start":
            CHAT_ID = chat_id
            send_telegram_message(CHAT_ID, "–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í–∞—à —á–∞—Ç –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        else:
            send_telegram_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ—Ç–∞.")

    return "OK", 200


def check_news():
    """–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏–Ω."""
    global CHAT_ID
    if CHAT_ID is None:
        print("CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ /start.")
        return

    try:
        response = requests.get(URL)
        soup = BeautifulSoup(response.text, "html.parser")
        dates = soup.find_all("p", class_="paragraph-18 textadata")

        if not dates:
            print("–î–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç—É —ñ–Ω—à–∞.")
            send_telegram_message(CHAT_ID, "üî¥ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç –Ω–∞ —Å–∞–π—Ç—ñ. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç—É –∑–º—ñ–Ω–∏–ª–∞—Å—è.")
            return

        target_date = datetime.datetime.now(KYIV_TZ).strftime("%Y-%m-%d")
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –¥–∞—Ç–æ—é: {target_date}")

        for date_element in dates:
            date = date_element.text.strip()
            if date == target_date:
                send_telegram_message(CHAT_ID, f"üü¢ –ù–æ–≤–∏–Ω–∞ –∑ –¥–∞—Ç–æ—é {target_date} –∑–Ω–∞–π–¥–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∞–π—Ç: {URL}")
                return

        print(f"–ù–æ–≤–∏–Ω –∑ –¥–∞—Ç–æ—é {target_date} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")


def send_status_message():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    global CHAT_ID
    if CHAT_ID:
        send_telegram_message(CHAT_ID, "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î.")
    else:
        print("CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –°—Ç–∞—Ç—É—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")


def set_webhook():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ Telegram."""
    webhook_url = f"https://{os.getenv('RAILWAY_STATIC_URL')}/{TELEGRAM_BOT_TOKEN}"
    url = f"{BASE_URL}/setWebhook"
    response = requests.post(url, data={"url": webhook_url})
    print(f"Set webhook response: {response.status_code} - {response.text}")


# –ó–∞–ø—É—Å–∫ –∑–∞–≤–¥–∞–Ω—å –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º
schedule.every(10).minutes.do(check_news)
schedule.every().day.at("08:00").do(send_status_message)
schedule.every().day.at("17:00").do(send_status_message)

def run_schedule():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    if os.getenv("SET_WEBHOOK") == "true":
        set_webhook()

    # –ó–∞–ø—É—Å–∫ Flask –¥–æ–¥–∞—Ç–∫—É
    from threading import Thread
    schedule_thread = Thread(target=run_schedule)
    schedule_thread.start()

    app.run(host="0.0.0.0", port=i
